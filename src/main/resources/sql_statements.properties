sql.limit.offset=LIMIT ? OFFSET ?
sql.event.pkColumnName=event_id
sql.item.pkColumnName=item_id
sql.token.pkColumnName=token_id
sql.user.pkColumnName=person_id
sql.note.pkColumnName=note_id
sql.note.add=\
    INSERT INTO public."Note"(name, description, creator)  \
    VALUES (?, ?, ?)
sql.note.findListNotes=\
    SELECT note_id, name, description, creator, folder \
    FROM public."Note"
sql.note.find=\
    SELECT note_id, name, description, creator, folder \
    FROM public."Note" WHERE note_id = ?
sql.event.add=\
    INSERT INTO public."Event" (name, description, creator, start_date, \
    end_date, width, longitude, eventplacename, type, is_draft) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql.event.delete=\
    DELETE FROM public."Event" \
    WHERE "Event".event_id =?
sql.event.find=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity \
    FROM public."Event" \
    WHERE event_id =?
sql.event.findListByCreator=\
    SELECT \
    event_id, \
    "Event".name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity \
    FROM public."Event" \
    INNER JOIN "Type" ON "Type".type_id = "Event".type \
    INNER JOIN "Person" ON "Person".person_id = "Event".creator
sql.event.getEventTypes=\
    SELECT \
    type_id, \
    value \
    FROM public."Type"
sql.event.update=\
    UPDATE public."Event" \
    SET name         = ?, \
    description    = ?, \
    start_date     = ?, \
    end_date       = ?, \
    type           = ?, \
    is_draft       = ?, \
    width          = ?, \
    longitude      = ?, \
    eventplacename = ? \
    WHERE event_id = ?
sql.event.participate=\
    INSERT INTO public."Participant" (person, event, is_accepted) \
    VALUES (?, ?, TRUE)
sql.event.findPersonEvents=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity \
    FROM "Event"  INNER JOIN "Participant" ON event_id="Participant".event \
    WHERE person = ? AND is_accepted = TRUE;
sql.friend.findFriends=\
    SELECT DISTINCT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    INNER JOIN "Friend" \
    ON "Person".person_id IN (sender, recipient) \
    WHERE (sender = ? OR recipient = ?) AND "isAccepted" = TRUE AND person_id <> ?
sql.friend.findUserByNameOrSurname=\
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    WHERE (lower(name) = ? OR lower(surname) = ?) AND person_id != ?
sql.friend.findUserByNameAndSurname=\
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    WHERE lower(name) IN (?, ?) AND lower(surname) IN (?, ?) AND person_id != ?
sql.friend.findRequestedUserById=\
    SELECT \
    sender, \
    recipient, \
    "isAccepted" \
    FROM public."Friend" \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?)
sql.friend.addRequestedUser=\
    INSERT INTO public."Friend" (sender, recipient, "isAccepted") \
    VALUES (?, ?, FALSE)
sql.friend.findOutgoingRequests=\
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    INNER JOIN public."Friend" ON "Person".person_id = "Friend".recipient \
    WHERE sender = ? AND "isAccepted" = FALSE
sql.friend.cancelRequest=\
    DELETE FROM public."Friend" \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?) \
    AND "isAccepted" = FALSE
sql.friend.findIncomingRequests=\
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    INNER JOIN public."Friend" ON "Person".person_id = "Friend".sender \
    WHERE recipient = ? AND "isAccepted" = FALSE
sql.friend.acceptRequest=\
    UPDATE public."Friend" \
    SET "isAccepted" = TRUE \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?) \
    AND "isAccepted" = FALSE;
sql.friend.deleteFriend=\
    DELETE FROM public."Friend" \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?) \
    AND "isAccepted" = TRUE
sql.friend.findFriendByNameOrSurname=\
    SELECT DISTINCT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    INNER JOIN "Friend" \
    ON "Person".person_id IN (sender, recipient) \
    WHERE (sender = ? OR recipient = ?) AND "isAccepted" = TRUE AND person_id <> ? \
    AND (lower(NAME) IN (?, ?) OR lower(surname) IN (?, ?))
sql.friend.findFriendByNameAndSurname=\
    SELECT DISTINCT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    INNER JOIN "Friend" \
    ON "Person".person_id IN (sender, recipient) \
    WHERE (sender = ? OR recipient = ?) AND "isAccepted" = TRUE AND person_id <> ? \
    AND (lower(NAME) IN (?, ?) AND lower(surname) IN (?, ?))
sql.item.add=\
    INSERT INTO public."Item" (item_id, person_id, booker_name, \
    item_name, link, due_date, priority, root) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?);
sql.item.delete=\
    DELETE FROM public."Item" \
    WHERE "Item".item_id = ?
sql.item.findList=\
    SELECT \
    item_id, \
    person, \
    booker, \
    name, \
    link, \
    due_date, \
    priority, \
    root \
    FROM public."Item"
sql.item.findPersonList=\
    SELECT \
    item_id, \
    person, \
    booker, \
    name, \
    link, \
    due_date, \
    priority, \
    root \
    FROM public."Item" \
    WHERE public."Item".person = ?
sql.item.update=\
    UPDATE public."Item" \
    SET person_id = ?, \
    booker_name = ?, \
    item_name   = ?, \
    link        = ?, \
    due_date    = ?, \
    priority    = ?, \
    root        = ? \
    WHERE "Item".item_id = ?
sql.user.add=\
    INSERT INTO public."Person" (name, surname, email, password, role, phone, birthday) \
    VALUES (?, ?, ?, ?, ?, ?, ?)
sql.user.changePassword=\
    UPDATE public."Person" \
    SET password = ? \
    WHERE email = ?
sql.user.findByEmail=\
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    WHERE email = ?
sql.user.find=\
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday \
    FROM public."Person" \
    WHERE person_id = ?
sql.user.update=\
    UPDATE "Person" \
    SET name   = ?, \
    surname  = ?, \
    birthday = ?, \
    phone    = ? \
    WHERE person_id =?
sql.token.create=\
    INSERT INTO public."Verif_token" (token_id, name, surname, email, password, role, birthday, phone) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
sql.token.delete=\
    DELETE FROM public."Verif_token" \
    WHERE token_id = ?
sql.token.find=\
    SELECT \
    token_id, \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    birthday, \
    phone \
    FROM public."Verif_token" \
    WHERE token_id = ?