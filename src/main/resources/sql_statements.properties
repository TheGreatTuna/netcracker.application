sql.limit.offset=LIMIT ? OFFSET ?
sql.event.pkColumnName=event_id
sql.item.pkColumnName=item_id
sql.token.pkColumnName=token_id
sql.user.pkColumnName=person_id
sql.note.pkColumnName=note_id
sql.note.add= \
    INSERT INTO public."Note"(name, description, creator)  \
    VALUES (?, ?, ?)
sql.note.findListNotes= \
    SELECT note_id, name, description, creator, folder \
    FROM public."Note"
sql.note.find= \
    SELECT note_id, name, description, creator, folder \
    FROM public."Note" WHERE note_id = ?
sql.note.delete= \
    DELETE FROM public."Note" \
    WHERE note_id = ?
sql.note.update= \
    UPDATE public."Note" \
    SET name=?, description=? \
    WHERE note_id = ?
sql.event.add= \
    INSERT INTO public."Event" (name, description, creator, start_date, \
    end_date, width, longitude, eventplacename, type, is_draft,photo) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)
sql.event.delete= \
    DELETE FROM public."Event" \
    WHERE "Event".event_id =?
sql.event.find= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,\
    photo \
    FROM public."Event" \
    WHERE event_id =?
sql.event.findListByCreator= \
    SELECT \
    event_id, \
    "Event".name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,photo \
    FROM public."Event" \
    INNER JOIN "Type" ON "Type".type_id = "Event".type \
    INNER JOIN "Person" ON "Person".person_id = "Event".creator
sql.event.findPublicEvents = \
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,photo \
    FROM "Event" \
    WHERE type = 2 AND is_draft = FALSE;
sql.event.findPrivateEvents = \
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,photo \
    FROM "Event" \
    WHERE type = 1 AND creator = ? AND is_draft = FALSE;
sql.event.findFriendsEvents = \
    SELECT DISTINCT \
        event_id, \
        name, \
        description, \
        creator, \
        start_date, \
        end_date, \
        type, \
        is_draft, \
        folder, \
        width, \
        longitude, \
        eventplacename, \
        periodicity,photo \
    FROM "Event" \
    WHERE type = 3 AND is_draft = FALSE \
    AND creator IN \
        (SELECT person_id \
            FROM "Person" \
            INNER JOIN "Friend" ON (person_id = sender OR person_id = recipient) \
            WHERE (sender = ? OR recipient = ?) \
            AND "isAccepted" = TRUE);
sql.event.findDrafts = \
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,photo \
    FROM "Event" \
    WHERE is_draft = TRUE AND creator = ?;
sql.event.update= \
    UPDATE public."Event" \
    SET name         = ?, \
    description    = ?, \
    start_date     = ?, \
    end_date       = ?, \
    type           = ?, \
    is_draft       = ?, \
    width          = ?, \
    longitude      = ?, \
    eventplacename = ?\
  ,photo = ? \
    WHERE event_id = ?
sql.event.participate= \
    INSERT INTO public."Participant" (person, event, is_accepted) \
    VALUES (?, ?, TRUE)
sql.event.findPersonEvents= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,photo \
    FROM "Event"  INNER JOIN "Participant" ON event_id="Participant".event \
    WHERE person = ? AND is_accepted = TRUE;
sql.eventType.getAllEventTypes= \
    SELECT type_id, value \
    FROM "Type"
sql.event.countParticipants= \
    SELECT count(person) as "count" \
    FROM public."Participant" \
    where event =? ;
sql.event.getParticipants= \
    SELECT person_id, name, surname, photo \
    FROM public."Person" \
    WHERE person_id in (SELECT person from public."Participant" \
    where event = ?);
sql.event.isParticipated= \
    SELECT event, priority, person \
    FROM public."Participant" \
    where person =? and event =? ;
sql.event.unsubscribe= \
    DELETE FROM public."Participant" \
    WHERE person = ? and event = ? AND is_accepted = TRUE;
sql.event.maxid=SELECT \
    MAX(event_id) \
    from "Event";

sql.event.findCreatedFriendsEvents= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,photo \
    FROM "Event" \
    WHERE type = 3 AND creator = ?
sql.event.findCreatedPublicEvents= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator, \
    start_date, \
    end_date, \
    type, \
    is_draft, \
    folder, \
    width, \
    longitude, \
    eventplacename, \
    periodicity,photo \
    FROM "Event" \
    WHERE type = 2 AND creator = ?
sql.event.getEventType = \
    SELECT type \
    FROM "Event" \
    where event_id = ? 
sql.event.isCreator= \
    SELECT count(creator) as "count" \
    FROM public."Event" \
    where creator =? and event_id =? ;
sql.friend.findFriends= \
    SELECT DISTINCT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    INNER JOIN "Friend" \
    ON "Person".person_id IN (sender, recipient) \
    WHERE (sender = ? OR recipient = ?) AND "isAccepted" = TRUE AND person_id <> ?
sql.friend.findUserByNameOrSurname= \
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    WHERE (lower(name) = ? OR lower(surname) = ?) AND person_id != ?
sql.friend.findUserByNameAndSurname= \
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    WHERE lower(name) IN (?, ?) AND lower(surname) IN (?, ?) AND person_id != ?
sql.friend.findFriendshipById= \
    SELECT \
    sender, \
    recipient, \
    "isAccepted" \
    FROM public."Friend" \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?);
sql.friend.addRequestedUser= \
    INSERT INTO public."Friend" (sender, recipient, "isAccepted") \
    VALUES (?, ?, FALSE)
sql.friend.findOutgoingRequests= \
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    INNER JOIN public."Friend" ON "Person".person_id = "Friend".recipient \
    WHERE sender = ? AND "isAccepted" = FALSE
sql.friend.cancelRequest= \
    DELETE FROM public."Friend" \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?) \
    AND "isAccepted" = FALSE
sql.friend.findIncomingRequests= \
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    INNER JOIN public."Friend" ON "Person".person_id = "Friend".sender \
    WHERE recipient = ? AND "isAccepted" = FALSE
sql.friend.acceptRequest= \
    UPDATE public."Friend" \
    SET "isAccepted" = TRUE \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?) \
    AND "isAccepted" = FALSE;
sql.friend.deleteFriend= \
    DELETE FROM public."Friend" \
    WHERE sender IN (?, ?) \
    AND recipient IN (?, ?) \
    AND "isAccepted" = TRUE
sql.friend.findFriendByNameOrSurname= \
    SELECT DISTINCT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    INNER JOIN "Friend" \
    ON "Person".person_id IN (sender, recipient) \
    WHERE (sender = ? OR recipient = ?) AND "isAccepted" = TRUE AND person_id <> ? \
    AND (lower(NAME) IN (?, ?) OR lower(surname) IN (?, ?))
sql.friend.findFriendByNameAndSurname= \
    SELECT DISTINCT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    INNER JOIN "Friend" \
    ON "Person".person_id IN (sender, recipient) \
    WHERE (sender = ? OR recipient = ?) AND "isAccepted" = TRUE AND person_id <> ? \
    AND (lower(NAME) IN (?, ?) AND lower(surname) IN (?, ?))
sql.item.add=\
    INSERT INTO public."Item" (person, booker, \
    name, description, link, due_date, priority, root) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?);
sql.item.update=\
    UPDATE public."Item" \
    SET person  = ?, \
    booker      = ?, \
    name        = ?, \
    description = ?, \
    link        = ?, \
    due_date    = ?, \
    priority    = ?, \
    root        = ? \
    WHERE "Item".item_id = ?
sql.item.delete=\
    DELETE FROM public."Item" \
    WHERE "Item".item_id = ?
sql.item.getItem=\
    SELECT \
    item_id, \
    person, \
    booker, \
    name, \
    description, \
    link, \
    due_date, \
    priority, \
    root \
    FROM public."Item"\
    WHERE public."Item".name=?
sql.item.PersonList=\
    SELECT \
    item_id, \
    person, \
    booker, \
    name, \
    description, \
    link, \
    due_date, \
    priority, \
    root \
    FROM public."Item" \
    WHERE public."Item".person = ?
sql.item.itemList=\
    SELECT \
    item_id, \
    person, \
    booker, \
    name, \
    description, \
    link, \
    due_date, \
    priority, \
    root \
    FROM public."Item"
sql.user.add= \
    INSERT INTO public."Person" (name, surname, email, password, role, phone, birthday, photo) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
sql.user.changePassword= \
    UPDATE public."Person" \
    SET password = ? \
    WHERE email = ?
sql.user.findByEmail= \
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    WHERE email = ?
sql.user.find= \
    SELECT \
    person_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthday, \
    photo \
    FROM public."Person" \
    WHERE person_id = ?
sql.user.update= \
    UPDATE "Person" \
    SET name   = ?, \
    surname  = ?, \
    birthday = ?, \
    phone    = ? \
    WHERE person_id =?
sql.token.create= \
    INSERT INTO public."Verif_token" (token_id, name, surname, email, password, role, birthday, phone) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
sql.token.delete= \
    DELETE FROM public."Verif_token" \
    WHERE token_id = ?
sql.token.find= \
    SELECT \
    token_id, \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    birthday, \
    phone \
    FROM public."Verif_token" \
    WHERE token_id = ?
sql.photo.update=\
  update "Person" set photo = ? \
  where person_id = ?

sql.priority.getAllPriority = \
  SELECT priority_id, value \
    FROM "Priority"

sql.participant.setPriority = \
  UPDATE "Participant" \
    SET priority   = ? \
    WHERE person = ? \
    AND event = ?

sql.participant.getEventPriority = \
  SELECT event,\
  priority \
  FROM "Participant"\
  WHERE person = ?

sql.participant.getParticipant = \
  SELECT event, person, priority \
  FROM "Participant"\
  WHERE event = ?\
  AND person = ?