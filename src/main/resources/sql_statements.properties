sql.limit.offset=LIMIT ? OFFSET ?
sql.event.pkColumnName=event_id
sql.item.pkColumnName=item_id
sql.token.pkColumnName=token_id
sql.user.pkColumnName=user_id
sql.note.pkColumnName=note_id
sql.folder.add=\
    INSERT INTO folders (name,creator_id) \
    VALUES(?,?)
sql.folder.findListFolders=\
      SELECT folder_id, name, creator_id \
    FROM folders
sql.folder.find=\
    SELECT folder_id, name, creator_id \
    FROM folders WHERE folder_id = ?
sql.folder.delete=\
    DELETE FROM folders \
    WHERE folder_id = ?
sql.folder.update=\
    UPDATE folders \
    SET name=? \
    WHERE folder_id = ?
sql.folder.getNotesListIntoFolder=\
    SELECT note_id, name,folder_id \
    FROM notes \
    WHERE folder_id in (SELECT folder_id from folders \
    where folder_id = ?);
sql.note.addNoteToFolder=\
    UPDATE notes  \
    SET folder_id =? WHERE note_id =?
sql.note.add=\
    INSERT INTO notes(name, description, creator_id)  \
    VALUES (?, ?, ?)
sql.note.findListNotes=\
    SELECT note_id, name, description, creator_id, folder_id \
    FROM notes
sql.note.find=\
    SELECT note_id, name, description, creator_id, folder_id \
    FROM notes WHERE note_id = ?
sql.note.delete=\
    DELETE FROM notes \
    WHERE note_id = ?
sql.note.update=\
    UPDATE notes \
    SET name=?, description=? \
    WHERE note_id = ?
sql.note.setFoldersNull= \
    UPDATE notes \
    SET folder_id = NULL \
    WHERE folder_id = ?;
sql.event.add= \
    INSERT INTO events (name, description, creator_id, start_date, \
    end_date, latitude, longitude, place_name, type_id, is_draft,photo) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)
sql.event.delete= \
    DELETE FROM events \
    WHERE events.event_id =?
sql.event.find= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity, \
    photo \
    FROM events \
    WHERE event_id =?
sql.event.findListByCreator= \
    SELECT \
    event_id, \
    events.name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    INNER JOIN event_types ON event_types.type_id = events.type_id \
    INNER JOIN users ON users.user_id = events.creator_id
sql.event.findPublicEvents= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 2 AND is_draft = FALSE;
sql.event.findPrivateEvents= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 1 AND creator_id = ? AND is_draft = FALSE;
sql.event.findFriendsEvents= \
    SELECT DISTINCT \
        event_id, \
        name, \
        description, \
        creator_id, \
        start_date, \
        end_date, \
        type_id, \
        is_draft, \
        folder_id, \
        latitude, \
        longitude, \
        place_name, \
        periodicity,photo \
    FROM events \
    WHERE type_id = 3 AND is_draft = FALSE \
    AND creator_id IN \
        (SELECT user_id \
            FROM users \
            INNER JOIN friends ON (user_id = sender_id OR user_id = recipient_id) \
            WHERE (sender_id = ? OR recipient_id = ?) \
            AND is_accepted = TRUE);
sql.event.findDrafts= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE is_draft = TRUE AND creator_id = ?;
sql.event.update= \
    UPDATE events \
    SET name         = ?, \
    description    = ?, \
    start_date     = ?, \
    end_date       = ?, \
    type_id           = ?, \
    is_draft       = ?, \
    latitude          = ?, \
    longitude      = ?, \
    place_name = ? \
  ,photo = ? \
    WHERE event_id = ?
sql.event.participate= \
    INSERT INTO participants (user_id, event_id, is_accepted) \
    VALUES (?, ?, TRUE)
sql.event.findPersonEvents= \
    SELECT \
    events.event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events  INNER JOIN participants ON events.event_id=participants.event_id \
    WHERE user_id = ? AND is_accepted = TRUE;
sql.eventType.getAllEventTypes= \
    SELECT type_id, name \
    FROM event_types
sql.event.countParticipants= \
    SELECT count(user_id) as "count" \
    FROM participants \
    where event_id =? ;
sql.event.getParticipants= \
    SELECT user_id, name, surname, photo \
    FROM users \
    WHERE user_id in (SELECT user_id from participants \
    where event_id = ?);
sql.event.isParticipated= \
    SELECT event_id, priority_id, user_id \
    FROM participants \
    where user_id =? and event_id =? ;
sql.event.unsubscribe= \
    DELETE FROM participants \
    WHERE user_id = ? and event_id = ? AND is_accepted = TRUE;
sql.event.maxid=SELECT \
    MAX(event_id) \
    from events;
sql.event.findCreatedFriendsEvents= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 3 AND creator_id = ?
sql.event.findCreatedPublicEvents= \
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    folder_id, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 2 AND creator_id = ?
sql.event.getEventType= \
    SELECT type_id \
    FROM events \
    where event_id = ? 
sql.event.getCreator= \
    SELECT user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    where user_id = \
        (select creator_id \
        FROM events \
        where event_id = ? )
sql.event.checkCreator= \
    SELECT \
    event_id, \
    creator_id \
    FROM events \
    WHERE creator_id = ? AND event_id = ?
sql.friend.findFriends= \
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    INNER JOIN friends \
    ON users.user_id IN (sender_id, recipient_id) \
    WHERE (sender_id = ? OR recipient_id = ?) AND is_accepted = TRUE AND user_id <> ?
sql.friend.findUserByNameOrSurname= \
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    WHERE (lower(name) = ? OR lower(surname) = ?) AND user_id != ?
sql.friend.findUserByNameAndSurname= \
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    WHERE lower(name) IN (?, ?) AND lower(surname) IN (?, ?) AND user_id != ?
sql.friend.findFriendshipById= \
    SELECT \
    sender_id, \
    recipient_id, \
    is_accepted \
    FROM friends \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?);
sql.friend.addRequestedUser= \
    INSERT INTO friends (sender_id, recipient_id, is_accepted) \
    VALUES (?, ?, FALSE)
sql.friend.findOutgoingRequests= \
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    INNER JOIN friends ON users.user_id = friends.recipient_id \
    WHERE sender_id = ? AND is_accepted = FALSE
sql.friend.cancelRequest= \
    DELETE FROM friends \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?) \
    AND is_accepted = FALSE
sql.friend.findIncomingRequests= \
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    INNER JOIN friends ON users.user_id = friends.sender_id \
    WHERE recipient_id = ? AND is_accepted = FALSE
sql.friend.acceptRequest= \
    UPDATE friends \
    SET is_accepted = TRUE \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?) \
    AND is_accepted = FALSE;
sql.friend.deleteFriend= \
    DELETE FROM friends \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?) \
    AND is_accepted = TRUE
sql.friend.findFriendByNameOrSurname= \
    SELECT DISTINCT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    INNER JOIN friends \
    ON users.user_id IN (sender_id, recipient_id) \
    WHERE (sender_id = ? OR recipient_id = ?) AND is_accepted = TRUE AND user_id <> ? \
    AND (lower(NAME) IN (?, ?) OR lower(surname) IN (?, ?))
sql.friend.findFriendByNameAndSurname= \
    SELECT DISTINCT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    INNER JOIN friends \
    ON users.user_id IN (sender_id, recipient_id) \
    WHERE (sender_id = ? OR recipient_id = ?) AND is_accepted = TRUE AND user_id <> ? \
    AND (lower(NAME) IN (?, ?) AND lower(surname) IN (?, ?))
sql.item.add= \
    INSERT INTO items (user_id, name, description, link, due_date, priority_id, root_id) \
    VALUES (?, ?, ?, ?, ?, ?, ?);
sql.item.update= \
    UPDATE items \
    SET user_id  = ?, \
    name        = ?, \
    description = ?, \
    link        = ?, \
    due_date    = ?, \
    priority_id    = ? \
    WHERE items.item_id = ?
sql.item.delete= \
    DELETE FROM items \
    WHERE items.item_id = ?
sql.item.getItem= \
    SELECT \
    item_id, \
    user_id, \
    booker_id, \
    name, \
    description, \
    link, \
    due_date, \
    priority_id, \
    root_id \
    FROM items \
    WHERE items.item_id=?
sql.item.itemList= \
    SELECT \
    item_id, \
    user_id, \
    booker_id, \
    name, \
    description, \
    link, \
    due_date, \
    priority_id, \
    root_id \
    FROM items
sql.user.add= \
    INSERT INTO users (name, surname, email, password, role, phone, birthdate, photo) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
sql.user.changePassword= \
    UPDATE users \
    SET password = ? \
    WHERE email = ?
sql.user.findByEmail= \
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    WHERE email = ?
sql.user.find= \
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo \
    FROM users \
    WHERE user_id = ?
sql.user.update= \
    UPDATE users \
    SET name   = ?, \
    surname  = ?, \
    phone    = ? \
    WHERE user_id =?
sql.user.getAllUsers= \
    SELECT \
    user_id, name, surname, photo \
    FROM users \
    WHERE user_id !=?
sql.token.create= \
    INSERT INTO verif_token (token_id, name, surname, email, password, role, birthdate, phone) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
sql.token.delete= \
    DELETE FROM verif_token \
    WHERE token_id = ?
sql.token.find= \
    SELECT \
    token_id, \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    birthdate, \
    phone \
    FROM verif_token \
    WHERE token_id = ?
sql.photo.update= \
  update users set photo = ? \
  where user_id = ?
sql.priority.getAllPriority= \
  SELECT priority_id, name \
    FROM priorities
sql.participant.setPriority= \
  UPDATE participants \
    SET priority_id   = ? \
    WHERE event_id = ? \
    AND user_id = ?
sql.participant.getEventPriority= \
  SELECT event_id, \
  priority_id \
  FROM participants \
  WHERE user_id = ?
sql.participant.getParticipant= \
  SELECT event_id, priority_id \
  FROM participants \
  WHERE event_id = ? \
  AND user_id = ?