sql.limit.offset=LIMIT ? OFFSET ?
sql.event.pkColumnName=event_id
sql.item.pkColumnName=item_id
sql.token.pkColumnName=token_id
sql.user.pkColumnName=user_id
sql.note.pkColumnName=note_id
sql.message.pkColumnName=message_id
sql.folder.add=\
    INSERT INTO folders (name,creator_id) \
    VALUES(?,?)
sql.folder.findListFolders=\
      SELECT folder_id, name, creator_id \
    FROM folders \
    WHERE creator_id = ?
sql.folder.find=\
    SELECT folder_id, name, creator_id \
    FROM folders WHERE folder_id = ?
sql.folder.delete=\
    DELETE FROM folders \
    WHERE folder_id = ?
sql.folder.update=\
    UPDATE folders \
    SET name=? \
    WHERE folder_id = ?
sql.folder.getNotesListIntoFolder=\
    SELECT note_id, name,folder_id \
    FROM notes \
    WHERE folder_id in (SELECT folder_id from folders \
    where folder_id = ?);
sql.folder.getFriendsThatHaveAccess=\
    SELECT \
    users.user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    INNER JOIN user_folders ON user_folders.user_id = users.user_id  \
    WHERE user_folders.folder_id= ? \
    ORDER BY name
sql.folder.allowAccessToFolder=\
    INSERT INTO user_folders (folder_id,user_id) \
    VALUES(?,?)
sql.folder.disableAccessToFolder=\
    DELETE FROM user_folders \
    WHERE folder_id = ? AND user_id = ?
sql.folder.getSharedFoldersToMe=\
    SELECT folders.folder_id, name, creator_id \
    FROM folders \
    INNER JOIN user_folders ON user_folders.folder_id = folders.folder_id \
    WHERE user_id = ?
sql.note.addNoteToFolder=\
    UPDATE notes  \
    SET folder_id =? WHERE note_id =?
sql.note.add=\
    INSERT INTO notes(name, description, creator_id)  \
    VALUES (?, ?, ?)
sql.note.findListNotes=\
    SELECT note_id, name, description, creator_id, folder_id \
    FROM notes \
    WHERE creator_id = ?
sql.note.find=\
    SELECT note_id, name, description, creator_id, folder_id \
    FROM notes WHERE note_id = ?
sql.note.delete=\
    DELETE FROM notes \
    WHERE note_id = ?
sql.note.update=\
    UPDATE notes \
    SET name=?, description=? \
    WHERE note_id = ?
sql.note.setFoldersNull=\
    UPDATE notes \
    SET folder_id = NULL \
    WHERE folder_id = ?
sql.note.deleteNoteFromFolder=\
    UPDATE notes \
    SET folder_id = NULL \
    WHERE note_id =?
sql.event.add=\
    INSERT INTO events (name, description, creator_id, start_date, \
    end_date, latitude, longitude, place_name, periodicity, type_id, is_draft,photo) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql.event.delete=\
    DELETE FROM events \
    WHERE events.event_id =?
sql.event.find=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity, \
    photo \
    FROM events \
    WHERE event_id =?
sql.event.findListByCreator=\
    SELECT \
    event_id, \
    events.name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    INNER JOIN event_types ON event_types.type_id = events.type_id \
    INNER JOIN users ON users.user_id = events.creator_id
sql.event.findPublicEvents=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 2 AND is_draft = FALSE;
sql.event.findPrivateEvents=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 1 AND creator_id = ? AND is_draft = FALSE;
sql.event.findFriendsEvents=\
    SELECT DISTINCT \
        event_id, \
        name, \
        description, \
        creator_id, \
        start_date, \
        end_date, \
        type_id, \
        is_draft, \
        latitude, \
        longitude, \
        place_name, \
        periodicity,photo \
    FROM events \
    WHERE type_id = 3 AND is_draft = FALSE \
    AND creator_id IN \
        (SELECT user_id \
            FROM users \
            INNER JOIN friends ON (user_id = sender_id OR user_id = recipient_id) \
            WHERE (sender_id = ? OR recipient_id = ?) \
            AND is_accepted = TRUE);
sql.event.findDrafts=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE is_draft = TRUE AND creator_id = ?;
sql.event.update=\
    UPDATE events \
    SET name         = ?, \
    description    = ?, \
    start_date     = ?, \
    end_date       = ?, \
    type_id           = ?, \
    is_draft       = ?, \
    latitude          = ?, \
    longitude      = ?, \
    place_name = ?, \
    periodicity = ?, \
    photo = ? \
    WHERE event_id = ?
sql.event.participate=\
    INSERT INTO participants (user_id, event_id) \
    VALUES (?, ?)
sql.event.findPersonEvents=\
    SELECT \
    events.event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events  INNER JOIN participants ON events.event_id=participants.event_id \
    WHERE user_id = ?;
sql.eventType.getAllEventTypes=\
    SELECT type_id, name \
    FROM event_types \
    where type_id !=0
sql.event.countParticipants=\
    SELECT count(user_id) as "count" \
    FROM participants \
    where event_id =? ;
sql.event.getParticipants=\
    SELECT user_id, name, surname, photo \
    FROM users \
    WHERE user_id in (SELECT user_id from participants \
    where event_id = ?);
sql.event.isParticipated=\
    SELECT event_id, priority_id, user_id \
    FROM participants \
    where user_id =? and event_id =? ;
sql.event.unsubscribe=\
    DELETE FROM participants \
    WHERE user_id = ? and event_id = ?;
sql.event.maxid=SELECT \
    MAX(event_id) \
    from events;
sql.event.findCreatedFriendsEvents=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 3 AND creator_id = ?
sql.event.findCreatedPublicEvents=\
    SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE type_id = 2 AND creator_id = ?
sql.event.getEventType=\
    SELECT type_id \
    FROM events \
    where event_id = ?
sql.event.getCreator=\
    SELECT user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    where user_id = \
        (select creator_id \
        FROM events \
        where event_id = ? )
sql.event.checkCreator=\
    SELECT \
    event_id, \
    creator_id \
    FROM events \
    WHERE creator_id = ? AND event_id = ?
sql.event.getAllPersonEvents=\
    SELECT \
    events.event_id, \
    start_date, \
    end_date \
    FROM events \
    INNER JOIN participants ON events.event_id=participants.event_id \
    WHERE user_id = ? AND is_draft = FALSE;
sql.friend.findFriends=\
    SELECT \
    user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    INNER JOIN friends \
    ON users.user_id IN (sender_id, recipient_id) \
    WHERE (sender_id = ? OR recipient_id = ?) AND is_accepted = TRUE AND user_id <> ? \
    ORDER BY name
sql.friend.findUserByNameOrSurname=\
    SELECT \
    user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    WHERE (lower(name) LIKE ? OR lower(surname) LIKE ?) AND user_id != ?
sql.friend.findUserByNameAndSurname=\
    SELECT \
    user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    WHERE (lower(name) SIMILAR TO ? AND lower(surname) SIMILAR TO ? ) AND user_id != ?
sql.friend.findFriendshipById=\
    SELECT \
    sender_id, \
    recipient_id, \
    is_accepted \
    FROM friends \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?);
sql.friend.addRequestedUser=\
    INSERT INTO friends (sender_id, recipient_id, is_accepted) \
    VALUES (?, ?, FALSE)
sql.friend.findOutgoingRequests=\
    SELECT \
    user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    INNER JOIN friends ON users.user_id = friends.recipient_id \
    WHERE sender_id = ? AND is_accepted = FALSE \
    ORDER BY name
sql.friend.cancelRequest=\
    DELETE FROM friends \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?) \
    AND is_accepted = FALSE
sql.friend.findIncomingRequests=\
    SELECT \
    user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    INNER JOIN friends ON users.user_id = friends.sender_id \
    WHERE recipient_id = ? AND is_accepted = FALSE \
    ORDER BY name
sql.friend.acceptRequest=\
    UPDATE friends \
    SET is_accepted = TRUE \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?) \
    AND is_accepted = FALSE;
sql.friend.deleteFriend=\
    DELETE FROM friends \
    WHERE sender_id IN (?, ?) \
    AND recipient_id IN (?, ?) \
    AND is_accepted = TRUE
sql.friend.findFriendByNameOrSurname=\
    SELECT \
    user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    INNER JOIN friends \
    ON users.user_id IN (sender_id, recipient_id) \
    WHERE (sender_id = ? OR recipient_id = ?) AND is_accepted = TRUE AND user_id <> ? \
    AND (lower(NAME) LIKE ? OR lower(surname) LIKE ?)
sql.friend.findFriendByNameAndSurname=\
    SELECT DISTINCT \
    user_id, \
    name, \
    surname, \
    photo \
    FROM users \
    INNER JOIN friends \
    ON users.user_id IN (sender_id, recipient_id) \
    WHERE (sender_id = ? OR recipient_id = ?) AND is_accepted = TRUE AND user_id <> ? \
    AND (lower(name) SIMILAR TO ? AND lower(surname) SIMILAR TO ? )
sql.item.add=\
    INSERT INTO items (user_id, name, description, link, due_date, priority_id, root_id,image) \
    VALUES (?, ?, ?, ?, ?, ?, ?,?);
sql.item.update=\
    UPDATE items \
    SET user_id  = ?, \
    name        = ?, \
    description = ?, \
    link        = ?, \
    due_date    = ?, \
    priority_id    = ?,\
    image = ? \
    WHERE items.item_id = ?
sql.item.delete=\
    DELETE FROM items \
    WHERE items.item_id = ?
sql.item.find=\
    SELECT \
    item_id, \
    user_id, \
    booker_id, \
    name, \
    description, \
    link, \
    due_date, \
    priority_id, \
    root_id, \
    image \
    FROM items \
    WHERE items.item_id=?
sql.item.findByUserId=\
    SELECT \
    item_id, \
    user_id, \
    booker_id, \
    name, \
    description, \
    link, \
    due_date, \
    priority_id, \
    root_id \
    event_id,\
    image,  \
    (SELECT Count(user_id) FROM likes WHERE likes.item_id=items.item_id and likes.user_id=items.user_id) AS "is_liked" \
    FROM items \
    where user_id = ?
sql.item.setRoot=\
    UPDATE items \
    SET root_id = ? \
    where item_id = ?
sql.item.getBookerId=\
    SELECT booker_id \
    FROM items \
    where item_id = ?
sql.item.insertCopiedItem=\
    INSERT INTO items (user_id, name, description, link,  root_id, image) \
    VALUES (?, ?, ?, ?, ?, ?);
sql.item.setBooker=\
    UPDATE items \
    SET booker_id = ? \
    where item_id = ?
sql.item.unbook=\
    UPDATE items \
    SET booker_id = NULL \
    where item_id = ? \
    and booker_id = ?
sql.item.setBookerFromEvent=\
    UPDATE items \
    SET booker_id = ?,\
    event_id = ? \
    where item_id = ?
sql.item.getPopularItems=\
    select item.item_id, item.name, item.image \
    from items item \
    INNER JOIN items popular ON item.item_id = popular.root_id \
    group by popular.root_id,  item.name, item.item_id, item.image \
    order by count(popular.root_id) desc \
    limit ? 
sql.item.searchItems=\
  SELECT \
    item_id, \
    user_id, \
    booker_id, \
    name, \
    description, \
    link, \
    due_date, \
    priority_id, \
    root_id \
    event_id,\
    image  \
  FROM items \
  WHERE item_id = root_id AND \
        ((to_tsvector(name) || to_tsvector(description)) @@ plainto_tsquery(?)) AND \
        user_id != ?
sql.item.cancelItemsBookingFromEvent=\
    UPDATE items \
    SET event_id = NULL \
    WHERE event_id =?
sql.user.add=\
    INSERT INTO users (name, surname, email, password, role, phone, birthdate, photo, gender) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
sql.user.changePassword=\
    UPDATE users \
    SET password = ? \
    WHERE email = ?
sql.user.findByEmail=\
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo, \
    gender \
    FROM users \
    WHERE email = ?
sql.user.find=\
    SELECT \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    phone, \
    birthdate, \
    photo,\
    gender, \
    notification_periodicity, \
    notification_start_date, \
    notification_end_date \
    FROM users \
    WHERE user_id = ?
sql.user.update=\
    UPDATE users \
    SET name = ?, \
    surname = ?, \
    phone = ?,\
    birthdate = ?,\
    photo = ? \
    WHERE user_id =?
sql.user.getAllUsers=\
    SELECT \
    user_id, name, surname, photo \
    FROM users \
    WHERE user_id !=?
sql.user.updateNotificationsSchedule=\
    UPDATE users \
    SET notification_periodicity = ?, \
    notification_start_date    = ?, \
    notification_end_date      = ? \
    WHERE user_id = ?
sql.user.getNotificationsSchedule= \
    SELECT \
        user_id, \
        notification_periodicity, \
        notification_start_date, \
        notification_end_date \
    FROM users \
    WHERE user_id = ?
sql.token.create=\
    INSERT INTO verif_token (token_id, name, surname, email, password, role, birthdate, phone, gender) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
sql.token.delete=\
    DELETE FROM verif_token \
    WHERE token_id = ?
sql.token.find=\
    SELECT \
    token_id, \
    user_id, \
    name, \
    surname, \
    email, \
    password, \
    role, \
    birthdate, \
    phone,\
    gender \
    FROM verif_token \
    WHERE token_id = ?
sql.photo.update=\
  update users set photo = ? \
  where user_id = ?
sql.priority.getAllPriority=\
  SELECT priority_id, name \
    FROM priorities
sql.participant.setPriority=\
  UPDATE participants \
    SET priority_id   = ? \
    WHERE event_id = ? \
    AND user_id = ?
sql.participant.getParticipation=\
  SELECT event_id, priority_id \
  FROM participants \
  WHERE event_id = ? \
  AND user_id = ?
sql.event.withPriority=\
  SELECT \
    events.event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity, \
    photo, \
    priority_id \
    FROM events \
    INNER JOIN participants ON events.event_id = participants.event_id \
    WHERE participants.user_id = ? AND events.event_id =?
sql.event.allWithPriority=\
  SELECT \
    events.event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity, \
    photo, \
    priority_id \
    FROM events \
    INNER JOIN participants ON events.event_id = participants.event_id \
    WHERE participants.user_id = ? AND is_draft = FALSE
sql.event.convertDraft=\
     UPDATE events \
    SET is_draft   = ? \
    WHERE event_id = ?
sql.event.searchPublic=\
  SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,\
    photo \
    FROM events \
    WHERE type_id = 2 AND is_draft = FALSE AND \
            ((to_tsvector(name) || to_tsvector(description)) @@ plainto_tsquery(?)) AND \
            event_id NOT IN(\
                            SELECT event_id \
                            FROM participants \
                            WHERE user_id = ?)
sql.event.searchForUser=\
  SELECT \
    event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity,photo \
    FROM events \
    WHERE is_draft = FALSE AND \
          ((to_tsvector(name) || to_tsvector(description)) @@ plainto_tsquery(?)) AND \
          event_id IN( SELECT event_id \
                       FROM participants \
                       WHERE user_id = ?)
sql.chat.add=\
 INSERT INTO chats (name,creator_event, event_id) \
    VALUES (?, ?, ?)
sql.chat.delete=DELETE FROM chats \
    WHERE chats.event_id =?
sql.chat.getMessages=\
  SELECT \
    text, \
    date, \
    sender_id, \
    chats.name chat_name, \
    users.name,\
    users.photo \
    from messages \
    join chats on  messages.chat_id = chats.chat_id \
    join users on messages.sender_id = users.user_id \
    where chats.event_id = ? and chats.chat_id = ? and chats.creator_event = ? \
    order by date desc
sql.message.add=\
  INSERT INTO messages (text,date,sender_id,chat_id) \
    VALUES (?, ?, ?, ?)
sql.chat.getChat=\
  SELECT \
    chat_id,\
    name,\
    event_id, \
    creator_event \
    from chats \
    where event_id =? and creator_event = ?
sql.chat.getChatByChatId=\
  SELECT \
    chat_id,\
    name,\
    event_id \
    from chats \
    where chat_id =?
sql.tag.getAll=\
  SELECT \
    tag_id, \
    name \
  FROM tags
sql.tag.getTagsOfItem=\
  SELECT \
    tag_id, \
    name \
  FROM tags \
  WHERE tag_id IN (\
                   SELECT tag_id \
                   FROM item_tags \
                   WHERE item_id = ?)
sql.tag.addTag=\
  INSERT INTO tags (name) VALUES (?)
sql.tag.addTagToItem=\
  INSERT INTO item_tags (tag_id, item_id) VALUES (?, ?)
sql.tag.findByName=\
  SELECT \
  tag_id, \
  name \
  FROM tags \
  WHERE name = ?
sql.tag.deleteTagOfItem=\
  DELETE FROM item_tags \
    WHERE tag_id = ? \
    AND item_id = ?
sql.tag.getPopular =\
    SELECT \
      tags.tag_id, \
      name \
    FROM tags \
     INNER JOIN item_tags it ON tags.tag_id = it.tag_id \
    GROUP BY tags.tag_id, name \
    ORDER BY count(item_id) DESC \
    LIMIT ?
sql.tag.getItemsByTag = \
  SELECT \
    item_id, \
    user_id, \
    booker_id, \
    name, \
    description, \
    image \
  FROM items \
  WHERE item_id IN (\
                    SELECT item_id \
                    FROM item_tags \
                    WHERE tag_id = ? ) \
  GROUP BY \
    root_id, \
    item_id, \
    user_id, \
    booker_id, \
    name, \
    description, \
    image \
   ORDER BY count(root_id) DESC

sql.event.getEventsByUserFromRange=\
  SELECT \
    events.event_id, \
    name, \
    description, \
    creator_id, \
    start_date, \
    end_date, \
    type_id, \
    is_draft, \
    latitude, \
    longitude, \
    place_name, \
    periodicity, \
    photo, \
    priority_id \
    FROM events \
        INNER JOIN participants ON events.event_id = participants.event_id \
    WHERE participants.user_id = ? \
        AND start_date < ? \
        AND ( \
            (tstzrange(start_date,end_date) && tstzrange(?,?)) \
            OR( periodicity IS NOT NULL) \
            );
sql.item.like=\
    INSERT INTO likes (item_id, user_id, is_liked) \
    VALUES (?, ?, TRUE);
sql.item.countLikes=\
    SELECT count(user_id) as "count" \
    FROM likes \
    WHERE item_id =? ;
sql.item.isLiked=\
    SELECT item_id, user_id \
    FROM likes \
    WHERE item_id =?\
    AND user_id =? ;
sql.item.dislike=\
    DELETE FROM likes \
    WHERE item_id = ? \
    AND user_id = ?;
  